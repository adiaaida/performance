parameters:
  osName: ''            # required -- windows | linux | macos
  osVersion: ''         # required -- OS version
  kind: ''              # required -- benchmark kind. As of today, only "micro" and "mlnet" benchmarks are supported, we plan to add "scenarios" soon
  architecture: ''      # required -- Architecture. Allowed values: x64, x86, arm32, arm64
  pool: ''              # required -- name of the Helix pool
  queue: ''             # required -- name of the Helix queue
  container: ''         # optional -- id of the container
  csproj: ''            # required -- relative path to csproj with benchmarks
  frameworks: []        # required -- list of frameworks. Allowed values: net461, netcoreapp2.1, netcoreapp2.2, netcoreapp3.0, corert
  runCategories: ''     # required -- string of space separated categories supplied to benchmark dotnet
  benchviewCategory: '' # optional -- category for benchview upload container

jobs:
- template: ../common/templates/jobs/jobs.yml
  parameters:
    enableTelemetry: false
    enablePublishBuildArtifacts: true
    helixRepo: dotnet/performance
    jobs:
      - job: '${{ parameters.osName }}_${{ parameters.osVersion }}_${{ parameters.architecture }}_${{ parameters.kind }}'
        displayName: '${{ parameters.osName }} ${{ parameters.osVersion }} ${{ parameters.architecture }} ${{ parameters.kind }}'
        timeoutInMinutes: 320
        variables:
        - ${{ if eq(parameters.osName, 'windows') }}:
          - name: CliArguments
            value: '--dotnet-version %DOTNET_VERSION% --cli-source-info args --cli-branch %PERFLAB_BRANCH% --cli-commit-sha %PERFLAB_HASH% --cli-repository https://github.com/%PERFLAB_REPO% --cli-source-timestamp %PERFLAB_BUILDTIMESTAMP%'
          - name: AdditionalHelixPreCommands
            value: '%HELIX_CORRELATION_PAYLOAD%\tools\machine-setup.cmd'
          - name: Python
            value: 'py -3'
        - ${{ if ne(parameters.osName, 'windows') }}:
          - name: CliArguments
            value: '--dotnet-version $DOTNET_VERSION --cli-source-info args --cli-branch $PERFLAB_BRANCH --cli-commit-sha $PERFLAB_HASH --cli-repository https://github.com/$PERFLAB_REPO --cli-source-timestamp $PERFLAB_BUILDTIMESTAMP'
          - name: AdditionalHelixPreCommands
            value: 'chmod +x ./tools/machine-setup.sh;. ./tools/machine-setup.sh'
          - name: Python
            value: python3  
        - ${{ if eq(variables['System.TeamProject'], 'public') }}:
          - name: BenchViewRunType
            value: private
          - name: BenchviewCommitName
            value: '.NET Performance - $(BenchViewRunType) - $(Build.SourceBranchName) $(System.PullRequest.PullRequestNumber)'
          # for public runs we do not want to generate data or upload it (missing --generate-benchview-data and --upload-to-benchview-container)
          - name: BenchViewArguments
            value: '--benchview-submission-name "$(BenchviewCommitName)" --benchview-machinepool perfsnake --benchview-run-type $(BenchViewRunType)'
          - name: Creator
            value: dotnet-performance
          # for public runs we want to run the benchmarks exactly once, no warmup, no pilot, no overhead
          - name: BenchmarkDotNetArguments
            value: '--anyCategories ${{ parameters.runCategories }} --iterationCount 1 --warmupCount 0 --invocationCount 1 --unrollFactor 1 --strategy ColdStart --stopOnFirstError true'
          - name: HelixApiAccessToken
            value: ''
          - name: HelixPreCommand
            value: '$(AdditionalHelixPreCommands)'
          - name: HelixSourcePrefix
            value: "pr"
        - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
          - name: BenchViewRunType
            value: rolling
          - name: BenchviewCommitName
            value: '.NET Performance - $(BenchViewRunType) - $(Build.SourceBranchName) $(Build.SourceVersion)'
          # for private runs we want to generate data (--generate-benchview-data ) and upload it (--upload-to-benchview-container specifies where)
          - name: BenchViewArguments
            value: '--benchview-submission-name "$(BenchviewCommitName)" --benchview-machinepool perfsnake --generate-benchview-data --benchview-run-type $(BenchViewRunType) --upload-to-benchview-container ${{ parameters.benchviewCategory}}'
          # for private runs we don't provide any custom BDN arguments (the ones from Program.Main are used)
          - name: BenchmarkDotNetArguments
            value: '--anyCategories ${{ parameters.runCategories }}'
          - name: Creator
            value: ''
          - ${{ if eq(parameters.osName, 'windows') }}:
            - name: HelixPreCommand
              value: 'set "BV_UPLOAD_SAS_TOKEN=$(BenchViewUploadToken)";$(AdditionHelixPreCommands)'
          - ${{ if ne(parameters.osName, 'windows') }}:
            - name: HelixPreCommand
              value: 'export BV_UPLOAD_SAS_TOKEN="$(BenchViewUploadTokenLinux)";$(AdditionalHelixPreCommands)'
          - name: HelixSourcePrefix
            value: 'official'
          - group: DotNet-HelixApi-Access
          - group: dotnet-benchview
        workspace:
          clean: all
        pool:
          name: ${{ parameters.pool }}
        container: ${{ parameters.container }}
        strategy:
          matrix:
            ${{ each framework in parameters.frameworks }}:
              ${{ framework }}:
                _Framework: ${{ framework }}
                _CompilationMode: NoTiering
                _Configs: CompilationMode=NoTiering
                _BuildConfig: ${{ parameters.architecture }}_$(_Framework)_${{ parameters.kind }} # needs to be unique to avoid logs overwriting in mc.dot.net
                ${{ if startsWith(framework, 'netcoreapp') }}:
                  _BenchViewArguments: $(BenchViewArguments)
                ${{ if not(startsWith(framework, 'netcoreapp')) }}: # we don't want to upload non-.NET Core results to BenchView
                  _BenchViewArguments: ''
              ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}: # to reduce the number of CI legs for every PR
                ${{ if startsWith(framework, 'netcoreapp') }}: # Tiered JIT was introduced in .NET Core 2.1
                  ${{ framework }}_tiered:
                    _Framework: ${{ framework }}
                    _Configs: CompilationMode=Tiered
                    _CompilationMode: Tiered
                    _BuildConfig: ${{ parameters.architecture }}_$(_Framework)_$(_CompilationMode)_${{ parameters.kind }}
                    _BenchViewArguments: $(BenchViewArguments)
        steps:
        - checkout: self
          clean: true
        - script: $(Python) scripts/ci_setup.py --frameworks $(_Framework) --perf-hash $(Build.SourceVersion) --queue ${{parameters.queue}} --build-number $(Build.BuildNumber) --build-configs $(_Configs)
        - ${{ if eq(parameters.osName, 'windows') }}:
          - script: (robocopy $(Build.SourcesDirectory) $(Build.SourcesDirectory)\notLocked /E /XD $(Build.SourcesDirectory)\notLocked $(Build.SourcesDirectory)\artifacts $(Build.SourcesDirectory)\.git) ^& IF %ERRORLEVEL% LEQ 1 exit 0
            displayName: Workaround to avoid locked file # https://github.com/dotnet/arcade/issues/2125
        - template: /eng/performance/send-to-helix.yml
          parameters:
            HelixSource: '$(HelixSourcePrefix)/dotnet/performance/$(Build.SourceBranch)' # sources must start with pr/, official/, prodcon/, or agent/
            HelixType: 'test/performance_$(_BuildConfig)/'
            HelixAccessToken: $(HelixApiAccessToken)
            HelixTargetQueues: ${{ parameters.queue }}
            HelixPreCommands: $(HelixPreCommand)
            Creator: $(Creator)
            Architecture: ${{ parameters.architecture }}
            TargetCsproj: ${{ parameters.csproj }}
            WorkItemTimeout: 4:00 # 4 hours
            Python: $(Python)
            ${{ if eq(parameters.osName, 'windows') }}:
              WorkItemDirectory: '$(Build.SourcesDirectory)\docs' # WorkItemDirectory can not be empty, so we send it some docs to keep it happy
              CorrelationPayloadDirectory: '$(Build.SourcesDirectory)\notLocked' # it gets checked out to a folder with shorter path than WorkItemDirectory so we can avoid file name too long exceptions
            ${{ if ne(parameters.osName, 'windows') }}:
              WorkItemDirectory: '$(Build.SourcesDirectory)'