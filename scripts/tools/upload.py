#!/usr/bin/env python3

from traceback import format_exc
import urllib.request
import os.path
import json
import hashlib

from benchview.console import write
from benchview.utils.common import is_supported_version

# 64mb max upload size (due to Azure limits on a single PUT)
MAX_UPLOAD_BYTES = 1024 * 1024 * 64


def get_argument_parser() -> dict:
    import argparse
    parser = argparse.ArgumentParser(
        description='Uploads a BenchView submission.',
        allow_abbrev=False
    )

    parser.add_argument(
        'infile',
        metavar = '<Input "submission.json" file name>',
        help = 'A list of submission JSON files as generated by "submission.py".',
        nargs = '+'
    )

    parser.add_argument(
        '--container',
        help = 'Name of the Azure Storage Container to upload to',
        required = True
    )

    parser.add_argument(
        '--sas-token-env',
        help = 'Name of environment variable containing Shared Access Signature token to use for authentication/authorization',
        required = False,
        default = 'BV_UPLOAD_SAS_TOKEN'
    )

    parser.add_argument(
        '--storage-account-uri',
        help = 'Uri of the Azure Storage Account to upload to (without protocol)',
        required = False,
        default = "benchviewupload.blob.core.windows.net"
    )

    return vars(parser.parse_args())


def load_submission_file(path):
    if os.path.getsize(path) > MAX_UPLOAD_BYTES:
        raise ValueError("File {} exceeds maximum upload size {}".format(path, MAX_UPLOAD_BYTES))
    with open(path, "rb") as f:
        return f.read()


def build_upload_url(jsonName, storageAccountUri, container, sasToken):
    if not storageAccountUri.endswith("/"):
        storageAccountUri += "/"

    if not sasToken.startswith("?"):
        sasToken = "?" + sasToken

    return "https://{}{}/{}{}".format(storageAccountUri, container, jsonName, sasToken)


def upload(url, data):
    headers = { "x-ms-blob-type": "BlockBlob", "Content-Type": "application/json" }
    req = urllib.request.Request(url=url, data=data, method='PUT', headers=headers)
    with urllib.request.urlopen(req) as f:
        pass
    if not (f.status == 200 or f.status == 201):
        raise ConnectionError("Upload to url {} failed with status {} and reason {}".format(url, f.status, f.reason))


def load_json_from_binary(data):
    jsonStr = data.decode('utf-8')
    return json.loads(jsonStr)


def build_unique_upload_name(container, submission, hash):
    return '{}_{}_{}.json'.format(container, submission["cuid"], hash)


def main() -> int:
    try:
        if not is_supported_version():
            write.error("You need to use Python 3.5 or newer.")
            return 1

        args = get_argument_parser()
        sas_token_env = args["sas_token_env"]
        sas_token = os.environ.get(sas_token_env)
        if sas_token is None:
            write.error("Sas token environment variable {} was not defined.".format(sas_token_env))
            return 1

        for infile in args['infile']:
            write.info("uploading {}".format(infile))

            data = load_submission_file(infile)
            hash = hashlib.sha1(data).hexdigest()
            submission = load_json_from_binary(data)
            jsonName = build_unique_upload_name(args['container'], submission, hash)
            url = build_upload_url(jsonName, args['storage_account_uri'], args['container'], sas_token)

            upload(url, data)

            write.info("upload complete")

    except Exception as ex:
        write.error('{0}: {1}'.format(type(ex), str(ex)))
        write.error(format_exc())
        return 1

if __name__ == "__main__":
    exit(main())
